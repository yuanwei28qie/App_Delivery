/**
 * 
 */
package com.microsilver.mrcard.basicservice.controller;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.microsilver.mrcard.basicservice.dto.RespBaseDto;
import com.microsilver.mrcard.basicservice.model.FxSdFinanceCustomer;
import com.microsilver.mrcard.basicservice.model.enums.EWarning;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * 
 * @Name com.microsilver.mrcard.basicservice.controller.FinanceController
 * @Description 
 * 
 * @Author huwei
 * @Version 2018年4月12日 上午9:08:36
 * @Copyright  Micro Silver-SuperDelivery
 *
 */
@Api(value = "/api/Finance", description= "财务API")
@Controller
@RequestMapping(value = "/api/Finance")
public class FinanceController extends BaseController {
		@Autowired
		private com.microsilver.mrcard.basicservice.service.FinanceService FinanceService;
		
		@ApiOperation(value = "新增财务账号", httpMethod = "POST")
		@ApiImplicitParams({ 
			@ApiImplicitParam(name = "userID", value = "用户ID", required = true, paramType = "body"),
			@ApiImplicitParam(name = "userType", value = "用户类型(1.用户,2,骑手,3,代理商)", required = true, paramType = "body"),
		})
		@RequestMapping(value = "/AddAccount")
		@ResponseBody
		public RespBaseDto<Object> AddAccount(
				String userID,
				String userType
				){
			RespBaseDto<Object> result = new RespBaseDto<Object>();
			try {
				if(userID!=null&&userType!=null) {
					FxSdFinanceCustomer customer = new FxSdFinanceCustomer();
					customer.setUserid(Long.parseLong(userID));
					customer.setUsertype(Byte.valueOf(userType));
					FinanceService.insertFinaceCustoemer(customer);
					//返回财务id
					result.setData(customer.getId());
					result.setMessage("ok");
					result.setState(200);
				}
			}
			catch(Exception e) {
				logger.error("AddAccount error:{}",e.getMessage());
				result.setMessage(EWarning.Unknown.getName()+e.getMessage());
				result.setState(EWarning.Unknown.getValue());
			}
			
			return result;
		}
		
		@ApiOperation(value = "获取财务账号余额", httpMethod = "POST")
		@ApiImplicitParams({ 
			@ApiImplicitParam(name = "userID", value = "用户ID", required = true, paramType = "body"),
			@ApiImplicitParam(name = "userType", value = "用户类型(1.用户,2,骑手,3,代理商)", required = true, paramType = "body"),
		})
		@RequestMapping(value = "/GetMyBalance")
		@ResponseBody
		public RespBaseDto<Map<String,BigDecimal>> GetMyBalance(
				String userID,
				String userType
				){
			RespBaseDto<Map<String,BigDecimal>> result = new RespBaseDto<Map<String,BigDecimal>>();
			Map<String,BigDecimal> map = new HashMap<String,BigDecimal>();
			try {
				if(userID!=null&&userType!=null) {
					FxSdFinanceCustomer customer = new FxSdFinanceCustomer();
					customer.setUserid(Long.parseLong(userID));
					customer.setUsertype(Byte.valueOf(userType));
					FxSdFinanceCustomer selectFinance= FinanceService.selectAccountByUserIdAndUserType(customer);
					if(selectFinance!=null) {
						map.put("real_amount(可提现金额)", selectFinance.getRealAmount());
						map.put("other_amount(不可提现金额)", selectFinance.getOtherAmount());
					}
					//可提现金额,不可提现金额存入map
					result.setData(map);
					result.setMessage("ok");
					result.setState(200);
				}
			}
			catch(Exception e) {
				logger.error("GetMyBalance error:{}",e.getMessage());
				result.setMessage(EWarning.Unknown.getName()+e.getMessage());
				result.setState(EWarning.Unknown.getValue());
			}
			
			return result;
		}
}
